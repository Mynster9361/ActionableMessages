name: Build Module Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'Public/**'
      - 'docs/**'
      - '.github/workflows/github-pages.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ActionableMessages repository
        uses: actions/checkout@v3
        with:
          path: actionable-messages

      - name: Checkout GitHub Pages repository
        uses: actions/checkout@v3
        with:
          repository: Mynster9361/mynster9361.github.io
          token: ${{ secrets.GH_PAGES_TOKEN }}
          path: github-pages

      - name: Setup PowerShell
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PlatyPS -Force

      - name: Generate docs
        shell: pwsh
        run: |
          # Import module from ActionableMessages repo
          Import-Module ./actionable-messages/ActionableMessages.psd1 -Force

          # Create module collection directory in GitHub Pages repo
          $targetDir = "./github-pages/_powershell_modules/actionablemessages"
          New-Item -ItemType Directory -Path $targetDir -Force
          $cmdDocsPath = "$targetDir/commands"
          New-Item -ItemType Directory -Path $cmdDocsPath -Force

          function Convert-TypeName($TypeName) {
            # Convert full .NET type names to simpler display versions
            $TypeName = $TypeName -replace "System\.", ""
            return $TypeName
          }

          function Get-ParameterInfo($Command) {
            $info = @()
            foreach ($parameter in $Command.Parameters.Keys) {
              $parameterInfo = $Command.Parameters[$parameter]
              $paramObj = [PSCustomObject]@{
                Name = $parameter
                Type = Convert-TypeName $parameterInfo.ParameterType.FullName
                Required = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).Mandatory
                Position = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).Position
                PipelineInput = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).ValueFromPipeline -or
                                $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).ValueFromPipelineByPropertyName
                DefaultValue = if ($parameterInfo.DefaultValue -ne $null -and $parameterInfo.DefaultValue.ToString() -ne "System.Object") { $parameterInfo.DefaultValue } else { "None" }
                AcceptWildcards = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).ValueFromRemainingArguments
              }
              $info += $paramObj
            }
            return $info | Sort-Object -Property Position, Name
          }

          function Get-CommandDocumentation($CommandName, $OutputPath) {
            $command = Get-Command $CommandName
            $help = Get-Help $CommandName -Full

            # Get command examples
            $examples = $help.Examples.Example | ForEach-Object {
              [PSCustomObject]@{
                Title = $_.Title.Replace("--------------------------  ", "").Trim()
                Code = $_.Code.Trim()
                Remarks = $_.Remarks.Text.Trim()
              }
            }

            # Get parameter information
            $parameters = Get-ParameterInfo $command

            # Create markdown content
            $markdown = @"
      ---
      layout: page
      title: $CommandName
      permalink: /modules/actionablemessages/commands/$CommandName/
      ---

      # $CommandName

      ## SYNOPSIS
      $($help.Synopsis)

      ## SYNTAX

      ```powershell
      $($command.Definition -replace '(?m)^\s+', '')
      ```

      ## DESCRIPTION
      $($help.Description.Text)

      ## EXAMPLES
      "@

            # Add examples
            $exampleNumber = 1
            foreach ($example in $examples) {
              $markdown += @"

      ### EXAMPLE $exampleNumber
      ```powershell
      $($example.Code)
      ```

      $($example.Remarks)
      "@
              $exampleNumber++
            }

            # Add parameters section
            $markdown += @"

      ## PARAMETERS
      "@

            foreach ($parameter in $parameters) {
              $paramHelp = $help.Parameters.Parameter | Where-Object { $_.Name -eq $parameter.Name }
              $markdown += @"

      ### -$($parameter.Name)
      $($paramHelp.Description.Text)

      ```yaml
      Type: $($parameter.Type)
      Parameter Sets: $(if ($paramHelp.ParameterSetName) { $paramHelp.ParameterSetName } else { "(All)" })
      Aliases: $(if ($paramHelp.Aliases) { $paramHelp.Aliases } else { "None" })

      Required: $($parameter.Required)
      Position: $($parameter.Position)
      Default value: $($parameter.DefaultValue)
      Accept pipeline input: $($parameter.PipelineInput)
      Accept wildcard characters: $($parameter.AcceptWildcards)
      ```
      "@
            }

            # Add Common Parameters section
            $markdown += @"

      ### CommonParameters
      This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see [about_CommonParameters](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_commonparameters).
      "@

            # Add inputs and outputs sections
            $markdown += @"

      ## INPUTS
      ### $($help.InputTypes.InputType.Type.Name)
      $($help.InputTypes.InputType.Description.Text)

      ## OUTPUTS
      ### $($help.ReturnValues.ReturnValue.Type.Name)
      $($help.ReturnValues.ReturnValue.Description.Text)
      "@

            # Add notes and links
            if ($help.AlertSet.Alert) {
              $markdown += @"

      ## NOTES
      $($help.AlertSet.Alert.Text)
      "@
            }

            if ($help.RelatedLinks.NavigationLink) {
              $markdown += @"

      ## RELATED LINKS
      "@
              foreach ($link in $help.RelatedLinks.NavigationLink) {
                if ($link.Uri) {
                  $markdown += @"
      [$($link.LinkText)]($($link.Uri))
      "@
                } else {
                  $markdown += @"
      [$($link.LinkText)]
      "@
                }
              }
            }

            # Write the markdown file
            Set-Content -Path $OutputPath -Value $markdown -Encoding UTF8
          }

          # Generate documentation for each command in the module
          $commands = Get-Command -Module ActionableMessages
          foreach ($command in $commands) {
            $outputFile = Join-Path $cmdDocsPath "$($command.Name).md"
            Get-CommandDocumentation -CommandName $command.Name -OutputPath $outputFile
          }

          # Create commands index page
          $commandsIndexPath = "$cmdDocsPath/index.md"
          $commandsIndexContent = @"
      ---
      layout: page
      title: ActionableMessages Commands
      permalink: /modules/actionablemessages/commands/
      ---

      # ActionableMessages Commands

      $(($commands | Sort-Object -Property Name | ForEach-Object { "- [`$($_.Name)`]($($_.Name)/)" }) -join "`r`n")
      "@
          Set-Content -Path $commandsIndexPath -Value $commandsIndexContent -Encoding UTF8

          # Create main index page with Jekyll front matter
          $mainIndexPath = "$targetDir/index.md"
          $mainIndexContent = @"
      ---
      layout: page
      title: ActionableMessages PowerShell Module
      permalink: /modules/actionablemessages/
      ---

      # ActionableMessages PowerShell Module

      A PowerShell module for creating Microsoft Actionable Messages.

      ## Installation

      ```powershell
      Install-Module -Name ActionableMessages -Scope CurrentUser
      ```

      ## Quick Start

      ```powershell
      $card = New-AMCard -ThemeColor "#0078D7"
      Add-AMElement -InputObject $card -Element (New-AMTextBlock -Text "Hello, World!")
      $jsonCard = Export-AMCard -Card $card
      ```

      ## Command Reference

      $(($commands | Sort-Object -Property Name | ForEach-Object { "- [`$($_.Name)`](commands/$($_.Name)/)" }) -join "`r`n")
      "@
          Set-Content -Path $mainIndexPath -Value $mainIndexContent -Encoding UTF8

      - name: Commit documentation to GitHub Pages repo
        run: |
          cd github-pages
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./_powershell_modules
          git commit -m "Update ActionableMessages module documentation" || echo "No changes to commit"
          git push