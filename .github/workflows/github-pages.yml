name: Build Module Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'Public/**'
      - 'docs/**'
      - '.github/workflows/github-pages.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ActionableMessages repository
        uses: actions/checkout@v3
        with:
          path: actionable-messages

      - name: Checkout GitHub Pages repository
        uses: actions/checkout@v3
        with:
          repository: Mynster9361/mynster9361.github.io
          token: ${{ secrets.GH_PAGES_TOKEN }}
          path: github-pages

      - name: Setup PowerShell
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PlatyPS -Force

      - name: Generate docs
        shell: pwsh
        run: |
          # Import module from ActionableMessages repo
          Import-Module ./actionable-messages/ActionableMessages.psd1 -Force

          # Create module collection directory in GitHub Pages repo
          $targetDir = "./github-pages/_powershell_modules/actionablemessages"
          New-Item -ItemType Directory -Path $targetDir -Force
          $cmdDocsPath = "$targetDir/commands"
          New-Item -ItemType Directory -Path $cmdDocsPath -Force

          function Convert-TypeName($TypeName) {
            # Convert full .NET type names to simpler display versions
            $TypeName = $TypeName -replace "System\.", ""
            return $TypeName
          }

          function Get-ParameterInfo($Command) {
            $info = @()
            foreach ($parameter in $Command.Parameters.Keys) {
              $parameterInfo = $Command.Parameters[$parameter]
              $paramObj = [PSCustomObject]@{
                Name = $parameter
                Type = Convert-TypeName $parameterInfo.ParameterType.FullName
                Required = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).Mandatory
                Position = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).Position
                PipelineInput = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).ValueFromPipeline -or
                                $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).ValueFromPipelineByPropertyName
                DefaultValue = if ($parameterInfo.DefaultValue -ne $null -and $parameterInfo.DefaultValue.ToString() -ne "System.Object") { $parameterInfo.DefaultValue } else { "None" }
                AcceptWildcards = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).ValueFromRemainingArguments
              }
              $info += $paramObj
            }
            return $info | Sort-Object -Property Position, Name
          }

          function Get-CleanSyntax($Command) {
            # Get a clean syntax representation
            $params = $Command.Parameters.Values | Where-Object { -not $_.IsDynamic }

            $syntax = "$($Command.Name) "
            $paramSyntax = $params | ForEach-Object {
              $param = $_
              $attributes = $param.Attributes | Where-Object { $_ -is [System.Management.Automation.ParameterAttribute] }
              $mandatory = $attributes | Where-Object { $_.Mandatory }

              if ($mandatory) {
                "[-$($param.Name)] <$($param.ParameterType.Name)>"
              } else {
                "[-$($param.Name) <$($param.ParameterType.Name)>]"
              }
            }

            $syntax += $paramSyntax -join " "
            $syntax += " [<CommonParameters>]"

            return $syntax
          }

          function Get-CommandDocumentation($CommandName, $OutputPath) {
            $command = Get-Command $CommandName
            $help = Get-Help $CommandName -Full

            # Get command examples
            $examples = $help.Examples.Example | ForEach-Object {
              [PSCustomObject]@{
                Title = $_.Title.Replace("--------------------------  ", "").Trim()
                Code = $_.Code.Trim()
                Remarks = $_.Remarks.Text.Trim()
              }
            }

            # Get parameter information
            $parameters = Get-ParameterInfo $command

            # Create markdown content using string concatenation
            $markdown = "---`r`n"
            $markdown += "layout: page`r`n"
            $markdown += "title: $CommandName`r`n"
            $markdown += "permalink: /modules/actionablemessages/commands/$CommandName/`r`n"
            $markdown += "---`r`n`r`n"
            $markdown += "# $CommandName`r`n`r`n"
            $markdown += "## SYNOPSIS`r`n$($help.Synopsis)`r`n`r`n"
            $markdown += "## SYNTAX`r`n`r`n"
            $markdown += "```powershell`r`n$(Get-CleanSyntax $command)`r`n````r`n`r`n"
            $markdown += "## DESCRIPTION`r`n$($help.Description.Text)`r`n`r`n"
            $markdown += "## EXAMPLES`r`n"

            # Add examples
            $exampleNumber = 1
            foreach ($example in $examples) {
              $markdown += "`r`n### EXAMPLE $exampleNumber`r`n"
              $markdown += "```powershell`r`n$($example.Code)`r`n````r`n`r`n"
              if ($example.Remarks) {
                $markdown += "$($example.Remarks)`r`n"
              }
              $exampleNumber++
            }

            # Add parameters section
            $markdown += "`r`n## PARAMETERS`r`n"

            # First add the regular parameters (non-common)
            foreach ($parameter in $parameters | Where-Object { $_.Name -notmatch '^(Debug|ErrorAction|ErrorVariable|InformationAction|InformationVariable|OutBuffer|OutVariable|PipelineVariable|ProgressAction|Verbose|WarningAction|WarningVariable)$' }) {
              $paramHelp = $help.Parameters.Parameter | Where-Object { $_.Name -eq $parameter.Name }
              $markdown += "`r`n### -$($parameter.Name)`r`n"
              if ($paramHelp.Description.Text) {
                $markdown += "$($paramHelp.Description.Text)`r`n`r`n"
              }
              $markdown += "```yaml`r`n"
              $markdown += "Type: $($parameter.Type)`r`n"
              $markdown += "Parameter Sets: $(if ($paramHelp.ParameterSetName) { $paramHelp.ParameterSetName } else { "(All)" })`r`n"
              $markdown += "Aliases: $(if ($paramHelp.Aliases) { $paramHelp.Aliases } else { "None" })`r`n`r`n"
              $markdown += "Required: $($parameter.Required)`r`n"
              $markdown += "Position: $($parameter.Position)`r`n"
              $markdown += "Default value: $($parameter.DefaultValue)`r`n"
              $markdown += "Accept pipeline input: $($parameter.PipelineInput)`r`n"
              $markdown += "Accept wildcard characters: $($parameter.AcceptWildcards)`r`n"
              $markdown += "````r`n"
            }

            # Add Common Parameters section
            $markdown += "`r`n### CommonParameters`r`n"
            $markdown += "This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see [about_CommonParameters](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_commonparameters).`r`n"

            # Add inputs and outputs sections
            $markdown += "`r`n## INPUTS`r`n"
            if ($help.InputTypes.InputType.Type.Name) {
              $markdown += "### $($help.InputTypes.InputType.Type.Name)`r`n"
              if ($help.InputTypes.InputType.Description.Text) {
                $markdown += "$($help.InputTypes.InputType.Description.Text)`r`n"
              }
            } else {
              $markdown += "### None`r`n"
            }

            $markdown += "`r`n## OUTPUTS`r`n"
            if ($help.ReturnValues.ReturnValue.Type.Name) {
              $markdown += "### $($help.ReturnValues.ReturnValue.Type.Name)`r`n"
              if ($help.ReturnValues.ReturnValue.Description.Text) {
                $markdown += "$($help.ReturnValues.ReturnValue.Description.Text)`r`n"
              }
            } else {
              $markdown += "### None`r`n"
            }

            # Add notes and links
            if ($help.AlertSet.Alert) {
              $markdown += "`r`n## NOTES`r`n"
              $markdown += "$($help.AlertSet.Alert.Text)`r`n"
            }

            if ($help.RelatedLinks.NavigationLink) {
              $markdown += "`r`n## RELATED LINKS`r`n"
              foreach ($link in $help.RelatedLinks.NavigationLink) {
                if ($link.Uri) {
                  $markdown += "* [$($link.LinkText)]($($link.Uri))`r`n"
                } else {
                  $markdown += "* [$($link.LinkText)]`r`n"
                }
              }
            }

            # Write the markdown file
            Set-Content -Path $OutputPath -Value $markdown -Encoding UTF8
          }

          # Generate documentation for each command in the module
          $commands = Get-Command -Module ActionableMessages
          foreach ($command in $commands) {
            $outputFile = Join-Path $cmdDocsPath "$($command.Name).md"
            Get-CommandDocumentation -CommandName $command.Name -OutputPath $outputFile
          }

          # Create commands index page
          $commandsIndexPath = "$cmdDocsPath/index.md"
          $commandsIndexContent = "---`r`n"
          $commandsIndexContent += "layout: page`r`n"
          $commandsIndexContent += "title: ActionableMessages Commands`r`n"
          $commandsIndexContent += "permalink: /modules/actionablemessages/commands/`r`n"
          $commandsIndexContent += "---`r`n`r`n"
          $commandsIndexContent += "# ActionableMessages Commands`r`n`r`n"
          $commandLinks = $commands | Sort-Object -Property Name | ForEach-Object {
            "* [``$($_.Name)``]($($_.Name)/)"
          }
          $commandsIndexContent += $commandLinks -join "`r`n"
          Set-Content -Path $commandsIndexPath -Value $commandsIndexContent -Encoding UTF8

          # Create main index page with Jekyll front matter
          $mainIndexPath = "$targetDir/index.md"
          $mainIndexContent = "---`r`n"
          $mainIndexContent += "layout: page`r`n"
          $mainIndexContent += "title: ActionableMessages PowerShell Module`r`n"
          $mainIndexContent += "permalink: /modules/actionablemessages/`r`n"
          $mainIndexContent += "---`r`n`r`n"
          $mainIndexContent += "# ActionableMessages PowerShell Module`r`n`r`n"
          $mainIndexContent += "A PowerShell module for creating Microsoft Actionable Messages.`r`n`r`n"
          $mainIndexContent += "## Installation`r`n`r`n"
          $mainIndexContent += "```powershell`r`n"
          $mainIndexContent += "Install-Module -Name ActionableMessages -Scope CurrentUser`r`n"
          $mainIndexContent += "````r`n`r`n"
          $mainIndexContent += "## Quick Start`r`n`r`n"
          $mainIndexContent += "```powershell`r`n"
          $mainIndexContent += "`$card = New-AMCard -ThemeColor `"#0078D7`"`r`n"
          $mainIndexContent += "Add-AMElement -InputObject `$card -Element (New-AMTextBlock -Text `"Hello, World!`")`r`n"
          $mainIndexContent += "`$jsonCard = Export-AMCard -Card `$card`r`n"
          $mainIndexContent += "````r`n`r`n"
          $mainIndexContent += "## Command Reference`r`n`r`n"
          $cmdLinks = $commands | Sort-Object -Property Name | ForEach-Object {
            "* [``$($_.Name)``](commands/$($_.Name)/)"
          }
          $mainIndexContent += $cmdLinks -join "`r`n"
          Set-Content -Path $mainIndexPath -Value $mainIndexContent -Encoding UTF8

      - name: Commit documentation to GitHub Pages repo
        run: |
          cd github-pages
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./_powershell_modules
          git commit -m "Update ActionableMessages module documentation" || echo "No changes to commit"
          git push