name: Build Module Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'Public/**'
      - 'docs/**'
      - '.github/workflows/github-pages.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ActionableMessages repository
        uses: actions/checkout@v3
        with:
          path: actionable-messages

      - name: Checkout GitHub Pages repository
        uses: actions/checkout@v3
        with:
          repository: Mynster9361/mynster9361.github.io
          token: ${{ secrets.GH_PAGES_TOKEN }}
          path: github-pages

      - name: Setup PowerShell
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PlatyPS -Force

      - name: Create documentation script
        shell: bash
        run: |
          cat > generate-docs.ps1 << 'EOL'
          # Import module from ActionableMessages repo
          Import-Module ./actionable-messages/ActionableMessages.psd1 -Force

          # Create module collection directory in GitHub Pages repo
          $targetDir = "./github-pages/_powershell_modules/actionablemessages"
          New-Item -ItemType Directory -Path $targetDir -Force
          $cmdDocsPath = "$targetDir/commands"
          New-Item -ItemType Directory -Path $cmdDocsPath -Force

          function Convert-TypeName($TypeName) {
            # Convert full .NET type names to simpler display versions
            $TypeName = $TypeName -replace "System\.", ""
            return $TypeName
          }

          function Get-ParameterInfo($Command) {
            $info = @()
            foreach ($parameter in $Command.Parameters.Keys) {
              $parameterInfo = $Command.Parameters[$parameter]
              $paramObj = [PSCustomObject]@{
                Name = $parameter
                Type = Convert-TypeName $parameterInfo.ParameterType.FullName
                Required = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).Mandatory
                Position = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).Position
                PipelineInput = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).ValueFromPipeline -or
                              $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).ValueFromPipelineByPropertyName
                DefaultValue = if ($parameterInfo.DefaultValue -ne $null -and $parameterInfo.DefaultValue.ToString() -ne "System.Object") { $parameterInfo.DefaultValue } else { "None" }
                AcceptWildcards = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).ValueFromRemainingArguments
              }
              $info += $paramObj
            }
            return $info | Sort-Object -Property Position, Name
          }

          function Get-CleanSyntax($Command) {
            # Get a clean syntax representation
            $params = $Command.Parameters.Values | Where-Object { -not $_.IsDynamic }

            $syntax = "$($Command.Name) "
            $paramSyntax = $params | ForEach-Object {
              $param = $_
              $attributes = $param.Attributes | Where-Object { $_ -is [System.Management.Automation.ParameterAttribute] }
              $mandatory = $attributes | Where-Object { $_.Mandatory }

              if ($mandatory) {
                "[-$($param.Name)] <$($param.ParameterType.Name)>"
              } else {
                "[-$($param.Name) <$($param.ParameterType.Name)>]"
              }
            }

            $syntax += $paramSyntax -join " "
            $syntax += " [<CommonParameters>]"

            return $syntax
          }

          function Get-CommandDocumentation($CommandName, $OutputPath) {
            $command = Get-Command $CommandName
            $help = Get-Help $CommandName -Full

            # Get command examples
            $examples = @()
            if ($help.Examples.Example) {
              foreach ($ex in $help.Examples.Example) {
                $examples += [PSCustomObject]@{
                  Title = $ex.Title.Replace("--------------------------  ", "").Trim()
                  Code = $ex.Code.Trim()
                  Remarks = $ex.Remarks.Text.Trim()
                }
              }
            }

            # Get parameter information
            $parameters = Get-ParameterInfo $command

            # Get the syntax first to avoid issues with nested function calls
            $syntax = Get-CleanSyntax $command

            # Pre-process help text to avoid issues with special characters
            $synopsis = if ($help.Synopsis) { $help.Synopsis.Trim() } else { "No synopsis available." }
            $description = if ($help.Description.Text) { $help.Description.Text.Trim() } else { "No description available." }

            # Use string array to build content
            $content = @()
            $content += "---"
            $content += "layout: page"
            $content += "title: $CommandName"
            $content += "permalink: /modules/actionablemessages/commands/$CommandName/"
            $content += "---"
            $content += ""
            $content += "# $CommandName"
            $content += ""
            $content += "## SYNOPSIS"
            $content += $synopsis
            $content += ""
            $content += "## SYNTAX"
            $content += ""
            $content += "```powershell"
            $content += $syntax
            $content += "```"
            $content += ""
            $content += "## DESCRIPTION"
            $content += $description
            $content += ""
            $content += "## EXAMPLES"

            # Add examples
            $exampleNumber = 1
            foreach ($example in $examples) {
              $content += ""
              $content += "### EXAMPLE $exampleNumber"
              $content += "```powershell"
              $content += $example.Code
              $content += "```"
              $content += ""
              if ($example.Remarks) {
                $content += $example.Remarks
                $content += ""
              }
              $exampleNumber++
            }

            # Add parameters section
            $content += "## PARAMETERS"

            # First add the regular parameters (non-common)
            $commonParams = @('Debug', 'ErrorAction', 'ErrorVariable', 'InformationAction', 'InformationVariable', 'OutBuffer', 'OutVariable', 'PipelineVariable', 'ProgressAction', 'Verbose', 'WarningAction', 'WarningVariable')
            $regularParams = $parameters | Where-Object { $commonParams -notcontains $_.Name }

            foreach ($parameter in $regularParams) {
              $paramHelp = $help.Parameters.Parameter | Where-Object { $_.Name -eq $parameter.Name }
              $content += ""
              $content += "### -$($parameter.Name)"
              if ($paramHelp.Description.Text) {
                $content += $paramHelp.Description.Text
                $content += ""
              }
              $content += "```yaml"
              $content += "Type: $($parameter.Type)"
              $parameterSetName = if ($paramHelp.ParameterSetName) { $paramHelp.ParameterSetName } else { "(All)" }
              $content += "Parameter Sets: $parameterSetName"
              $aliases = if ($paramHelp.Aliases) { $paramHelp.Aliases } else { "None" }
              $content += "Aliases: $aliases"
              $content += ""
              $content += "Required: $($parameter.Required)"
              $content += "Position: $($parameter.Position)"
              $content += "Default value: $($parameter.DefaultValue)"
              $content += "Accept pipeline input: $($parameter.PipelineInput)"
              $content += "Accept wildcard characters: $($parameter.AcceptWildcards)"
              $content += "```"
            }

            # Add Common Parameters section
            $content += ""
            $content += "### CommonParameters"
            $content += "This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see [about_CommonParameters](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_commonparameters)."

            # Add inputs and outputs sections
            $content += ""
            $content += "## INPUTS"
            if ($help.InputTypes.InputType.Type.Name) {
              $content += "### $($help.InputTypes.InputType.Type.Name)"
              if ($help.InputTypes.InputType.Description.Text) {
                $content += $help.InputTypes.InputType.Description.Text
              }
            } else {
              $content += "### None"
            }

            $content += ""
            $content += "## OUTPUTS"
            if ($help.ReturnValues.ReturnValue.Type.Name) {
              $content += "### $($help.ReturnValues.ReturnValue.Type.Name)"
              if ($help.ReturnValues.ReturnValue.Description.Text) {
                $content += $help.ReturnValues.ReturnValue.Description.Text
              }
            } else {
              $content += "### None"
            }

            # Add notes and links
            if ($help.AlertSet.Alert) {
              $content += ""
              $content += "## NOTES"
              $content += $help.AlertSet.Alert.Text
            }

            if ($help.RelatedLinks.NavigationLink) {
              $content += ""
              $content += "## RELATED LINKS"
              foreach ($link in $help.RelatedLinks.NavigationLink) {
                if ($link.Uri) {
                  $content += "* [$($link.LinkText)]($($link.Uri))"
                } else {
                  $content += "* $($link.LinkText)"
                }
              }
            }

            # Join with LF and write to file
            [System.IO.File]::WriteAllText($OutputPath, ($content -join "`n"))
          }

          # Generate documentation for each command in the module
          $commands = Get-Command -Module ActionableMessages
          foreach ($command in $commands) {
            Write-Host "Generating documentation for $($command.Name)"
            $outputFile = Join-Path $cmdDocsPath "$($command.Name).md"
            Get-CommandDocumentation -CommandName $command.Name -OutputPath $outputFile
          }

          # Create commands index page
          $content = @(
            "---",
            "layout: page",
            "title: ActionableMessages Commands",
            "permalink: /modules/actionablemessages/commands/",
            "---",
            "",
            "# ActionableMessages Commands",
            ""
          )

          foreach ($command in ($commands | Sort-Object -Property Name)) {
            $content += "* [``$($command.Name)``]($($command.Name)/)"
          }

          $commandsIndexPath = "$cmdDocsPath/index.md"
          [System.IO.File]::WriteAllText($commandsIndexPath, ($content -join "`n"))

          # Create main index page
          $content = @(
            "---",
            "layout: page",
            "title: ActionableMessages PowerShell Module",
            "permalink: /modules/actionablemessages/",
            "---",
            "",
            "# ActionableMessages PowerShell Module",
            "",
            "A PowerShell module for creating Microsoft Actionable Messages.",
            "",
            "## Installation",
            "",
            "```powershell",
            "Install-Module -Name ActionableMessages -Scope CurrentUser",
            "```",
            "",
            "## Quick Start",
            "",
            "```powershell",
            '$card = New-AMCard -ThemeColor "#0078D7"',
            'Add-AMElement -InputObject $card -Element (New-AMTextBlock -Text "Hello, World!")',
            '$jsonCard = Export-AMCard -Card $card',
            "```",
            "",
            "## Command Reference",
            ""
          )

          foreach ($command in ($commands | Sort-Object -Property Name)) {
            $content += "* [``$($command.Name)``](commands/$($command.Name)/)"
          }

          $mainIndexPath = "$targetDir/index.md"
          [System.IO.File]::WriteAllText($mainIndexPath, ($content -join "`n"))
          EOL

      - name: Generate docs
        shell: pwsh
        run: |
          ./generate-docs.ps1

      - name: Commit documentation to GitHub Pages repo
        run: |
          cd github-pages
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./_powershell_modules
          git commit -m "Update ActionableMessages module documentation" || echo "No changes to commit"
          git push