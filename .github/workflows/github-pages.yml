name: Build Module Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'Public/**'
      - 'docs/**'
      - '.github/workflows/github-pages.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ActionableMessages repository
        uses: actions/checkout@v3
        with:
          path: actionable-messages

      - name: Checkout GitHub Pages repository
        uses: actions/checkout@v3
        with:
          repository: Mynster9361/mynster9361.github.io
          token: ${{ secrets.GH_PAGES_TOKEN }}
          path: github-pages

      - name: Setup PowerShell
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PlatyPS -Force

      - name: Generate docs
        shell: pwsh
        # Using heredoc syntax for better PowerShell multiline handling
        run: |-
          # Import module from ActionableMessages repo
          Import-Module ./actionable-messages/ActionableMessages.psd1 -Force

          # Create module collection directory in GitHub Pages repo
          $targetDir = "./github-pages/_powershell_modules/actionablemessages"
          New-Item -ItemType Directory -Path $targetDir -Force
          $cmdDocsPath = "$targetDir/commands"
          New-Item -ItemType Directory -Path $cmdDocsPath -Force

          function Convert-TypeName($TypeName) {
          # Convert full .NET type names to simpler display versions
          $TypeName = $TypeName -replace "System\.", ""
          return $TypeName
          }

          function Get-ParameterInfo($Command) {

            $info = @()
            foreach ($parameter in $Command.Parameters.Keys) {
              $parameterInfo = $Command.Parameters[$parameter]
              $paramObj = [PSCustomObject]@{
                Name = $parameter
                Type = Convert-TypeName $parameterInfo.ParameterType.FullName
                Required = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).Mandatory
                Position = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).Position
                PipelineInput = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).ValueFromPipeline -or
                  $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).ValueFromPipelineByPropertyName
                DefaultValue = if ($parameterInfo.DefaultValue -ne $null -and $parameterInfo.DefaultValue.ToString() -ne "System.Object") {
                  $parameterInfo.DefaultValue
                } else {
                  "None"
                }
                AcceptWildcards = $parameterInfo.Attributes.Where({$_ -is [System.Management.Automation.ParameterAttribute]}).ValueFromRemainingArguments
              }
              $info += $paramObj
            }
            return $info | Sort-Object -Property Position, Name
          }

          function Get-CleanSyntax($Command) {
            # Get a clean syntax representation
            $params = $Command.Parameters.Values | Where-Object { -not $_.IsDynamic }

            $syntax = "$($Command.Name) "
            $paramSyntax = $params | ForEach-Object {
              $param = $_
              $attributes = $param.Attributes | Where-Object { $_ -is [System.Management.Automation.ParameterAttribute] }
              $mandatory = $attributes | Where-Object { $_.Mandatory }

              if ($mandatory) {
                "[-$($param.Name)] <$($param.ParameterType.Name)>"
              } else {
                "[-$($param.Name) <$($param.ParameterType.Name)>]"
              }
            }

            $syntax += $paramSyntax -join " "
            $syntax += " [<CommonParameters>]"

            return $syntax
          }

          function Get-CommandDocumentation($CommandName, $OutputPath) {
            $command = Get-Command $CommandName
            $help = Get-Help $CommandName -Full

              # Get command examples
              $examples = @()
              if ($help.Examples.Example) {
                  foreach ($ex in $help.Examples.Example) {
                      # Handle remarks properly
                      $remarksText = if ($ex.Remarks.Text -is [System.Array]) {
                          $ex.Remarks.Text -join "`n"  # Join array elements with newlines
                      } else {
                          $ex.Remarks.Text.Trim()
                      }

                      $examples += [PSCustomObject]@{
                          Title = $ex.Title.Replace("--------------------------  ", "").Trim()
                          Code = $ex.Code.Trim()
                          Remarks = $remarksText
                      }
                  }
              }

            # Get parameter information
            $parameters = Get-ParameterInfo $command

            # Get the syntax first to avoid issues with nested function calls
            $syntax = Get-CleanSyntax $command

            # Pre-process help text to avoid issues with special characters
            $synopsis = if ($help.Synopsis) {
              $help.Synopsis.Trim()
            } else {
              "No synopsis available."
            }
            $description = if ($help.Description.Text) {
              $help.Description.Text.Trim()
            } else {
              "No description available."
              }

            # Use string array to build content
            $content = @()
            $content += "---"
            $content += "layout: page"
            $content += "title: $CommandName"
            $content += "permalink: /modules/actionablemessages/commands/$CommandName/"
            $content += "---"
            $content += ""
            $content += "# $CommandName"
            $content += ""
            $content += "## SYNOPSIS"
            $content += $synopsis
            $content += ""
            $content += "## SYNTAX"
            $content += ""
            $content += '```powershell'
            $content += $syntax
            $content += '```'
            $content += ""
            $content += "## DESCRIPTION"
            $content += $description
            $content += ""
            $content += "## EXAMPLES"

              # Add examples
              $exampleNumber = 1
              foreach ($example in $examples) {
                  $content += ""
                  $content += "### EXAMPLE $exampleNumber"
                  $content += '```powershell'
                  $content += $example.Code
                  $content += '```'
                  $content += ""
                  if ($example.Remarks) {
                      # Check if remarks contain actual content
                      if (-not [string]::IsNullOrWhiteSpace($example.Remarks)) {
                          # Add a single code block for all remarks content
                          $content += "#### Example explanation"
                          $content += '```powershell'
                          $content += $example.Remarks.Trim()
                          $content += '```'
                      }
                  }
                  $exampleNumber++
              }

            # Add parameters section
            $content += "## PARAMETERS"

            # First add the regular parameters (non-common)
            $commonParams = @('Debug', 'ErrorAction', 'ErrorVariable', 'InformationAction', 'InformationVariable', 'OutBuffer', 'OutVariable', 'PipelineVariable', 'ProgressAction', 'Verbose', 'WarningAction', 'WarningVariable')
            $regularParams = $parameters | Where-Object { $commonParams -notcontains $_.Name }

            foreach ($parameter in $regularParams) {
              $paramHelp = $help.Parameters.Parameter | Where-Object { $_.Name -eq $parameter.Name }
              $content += ""
              $content += "### -$($parameter.Name)"
              if ($paramHelp.Description.Text) {
                $content += $paramHelp.Description.Text
                $content += ""
              }
              $content += '```yaml'
              $content += "Type: $($parameter.Type)"
              $parameterSetName = if ($paramHelp.ParameterSetName) {
                $paramHelp.ParameterSetName
              } else {
                "(All)"
              }
              $content += "Parameter Sets: $parameterSetName"
              $aliases = if ($paramHelp.Aliases) {
                $paramHelp.Aliases
              } else {
                "None"
              }
              $content += "Aliases: $aliases"
              $content += ""
              $content += "Required: $($parameter.Required)"
              $content += "Position: $($parameter.Position)"
              $content += "Default value: $($parameter.DefaultValue)"
              $content += "Accept pipeline input: $($parameter.PipelineInput)"
              $content += "Accept wildcard characters: $($parameter.AcceptWildcards)"
              $content += '```'
            }

            # Add Common Parameters section
            $content += ""
            $content += "### CommonParameters"
            $content += "This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see [about_CommonParameters](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_commonparameters)."

            # Add inputs and outputs sections
            $content += ""
            $content += "## INPUTS"
            if ($help.InputTypes.InputType.Type.Name) {
              $content += "### $($help.InputTypes.InputType.Type.Name)"
            if ($help.InputTypes.InputType.Description.Text) {
              $content += $help.InputTypes.InputType.Description.Text
            }
            } else {
              $content += "### None"
            }

            $content += ""
            $content += "## OUTPUTS"
            if ($help.ReturnValues.ReturnValue.Type.Name) {
              $content += "### $($help.ReturnValues.ReturnValue.Type.Name)"
            if ($help.ReturnValues.ReturnValue.Description.Text) {
              $content += $help.ReturnValues.ReturnValue.Description.Text
            }
            } else {
              $content += "### None"
            }

            # Add notes and links
            if ($help.AlertSet.Alert) {
              $content += ""
              $content += "## NOTES"
              $content += $help.AlertSet.Alert.Text
            }

            if ($help.RelatedLinks.NavigationLink) {
              $content += ""
              $content += "## RELATED LINKS"
              foreach ($link in $help.RelatedLinks.NavigationLink) {
                if ($link.Uri) {
                  $content += "- [$($link.Uri)]($($link.Uri))"
                } else {
                  $content += "- $($link.LinkText)"
                }
              }
            }

            # Join with LF and write to file
            #[System.IO.File]::WriteAllText($OutputPath, ($content -join "`n"))
              $content | Out-File $OutputPath -Encoding utf8
              [System.IO.File]::WriteAllLines($OutputPath, $content)
          }

          # Generate documentation for each command in the module
          $commands = Get-Command -Module ActionableMessages
          foreach ($command in $commands) {
            Write-Host "Generating documentation for $($command.Name)"
            $outputFile = Join-Path $cmdDocsPath "$($command.Name).md"
            Get-CommandDocumentation -CommandName $command.Name -OutputPath $outputFile
          }

          # Create commands index page
          $content = @(
          "---",
          "layout: page",
          "title: ActionableMessages Commands",
          "permalink: /modules/actionablemessages/commands/",
          "---",
          "",
          "# ActionableMessages Commands",
          ""
          )

          foreach ($command in ($commands | Sort-Object -Property Name)) {
              $content += "* [``$($command.Name)``]($($command.Name)/)"
          }

          $commandsIndexPath = "$cmdDocsPath/index.md"
          [System.IO.File]::WriteAllText($commandsIndexPath, ($content -join "`n"))

          # Create main index page
          $content = @(
          "---",
          "layout: page",
          "title: ActionableMessages PowerShell Module",
          "permalink: /modules/actionablemessages/",
          "---",
          "",
          "# ActionableMessages PowerShell Module",
          "",
          "A powerful PowerShell module for creating interactive Actionable Messages for Microsoft Outlook and other Microsoft 365 applications. This module allows you to easily build rich, interactive content that enables recipients to take action directly from within their email client.",
          "",
          "## Key Features",
          "",
          "* Create rich, interactive cards with minimal code",
          "* Support for all Adaptive Card elements and actions",
          "* Send interactive emails through Graph API or Exchange",
          "* Design forms, approvals, notifications, and more",
          "* Simple PowerShell syntax for complex card layouts",
          "",
          "## Installation",
          "",
          "Install directly from the PowerShell Gallery:",
          "",
          '```powershell',
          "Install-Module -Name ActionableMessages -Scope CurrentUser",
          '```',
          "",
          "## Quick Start Guide",
          "",
          "### Basic Notification Card",
          "",
          '```powershell',
          '# Create a new card',
          '$card = New-AMCard -OriginatorId "your-originator-id" -Version "1.0"',
          '',
          '# Add a header',
          '$header = New-AMTextBlock -Text "Important Notification" -Size "Large" -Weight "Bolder"',
          'Add-AMElement -Card $card -Element $header',
          '',
          '# Add content',
          '$message = New-AMTextBlock -Text "This is an important notification that requires your attention." -Wrap $true',
          'Add-AMElement -Card $card -Element $message',
          '',
          '# Add an action button',
          '$action = New-AMOpenUrlAction -Title "View Details" -Url "https://example.com/details"',
          '$actionSet = New-AMActionSet -Actions @($action)',
          'Add-AMElement -Card $card -Element $actionSet',
          '',
          '# Export the card to JSON',
          '$jsonCard = Export-AMCard -Card $card',
          '',
          '# For email delivery',
          '$emailParams = Export-AMCardForEmail -Card $card -Subject "Important Notification" -ToRecipients "user@example.com"',
          '```',
          "",
          "### Interactive Approval Form",
          "",
          '```powershell',
          '# Create approval card',
          '$card = New-AMCard -OriginatorId "your-originator-id" -Version "1.0"',
          '',
          '# Add header',
          'Add-AMElement -Card $card -Element (New-AMTextBlock -Text "Approval Request" -Size "Large" -Weight "Bolder")',
          '',
          '# Add request details with facts',
          '$facts = @(',
          '    New-AMFact -Title "Requester" -Value "Jane Smith"',
          '    New-AMFact -Title "Request #" -Value "REQ-2023-0789"',
          '    New-AMFact -Title "Amount" -Value "`$1,250.00"',
          '    New-AMFact -Title "Purpose" -Value "New Equipment"',
          ')',
          '$factSet = New-AMFactSet -Facts $facts',
          'Add-AMElement -Card $card -Element $factSet',
          '',
          '# Add comment field',
          '$comment = New-AMTextInput -Id "comment" -Label "Comments:" -IsMultiline $true',
          'Add-AMElement -Card $card -Element $comment',
          '',
          '# Add approve/reject buttons',
          '$approveParams = @{',
          '    "Title"    = "Approve"',
          '    "Verb"     = "POST"',
          '    "Url"      = "https://api.example.com/approve"',
          '    "Body"     = @{',
          '        "requestId" = "REQ-2023-0789"',
          '        "action"    = "approve"',
          '        "comment"   = "{{comment.value}}"',
          '    }',
          '}',
          '$rejectParams = @{',
          '    "Title"    = "Reject"',
          '    "Verb"     = "POST"',
          '    "Url"      = "https://api.example.com/reject"',
          '    "Body"     = @{',
          '        "requestId" = "REQ-2023-0789"',
          '        "action"    = "reject"',
          '        "comment"   = "{{comment.value}}"',
          '    }',
          '}',
          '$approveAction = New-AMExecuteAction @approveParams',
          '$rejectAction = New-AMExecuteAction @rejectParams',
          '',
          '$actionSet = New-AMActionSet -Actions @($approveAction, $rejectAction)',
          'Add-AMElement -Card $card -Element $actionSet',
          '```',
          "",
          "## Module Structure",
          "",
          "The module is organized into logical function categories:",
          "",
          "* **Core Functions**: Card creation, manipulation, and export",
          "* **Element Functions**: Visual components like text, images, and containers",
          "* **Action Functions**: Interactive buttons and links",
          "* **Input Functions**: Form elements for collecting user input",
          "",
          "## Use Cases",
          "",
          "* Approval workflows (expenses, time off, document publishing)",
          "* IT service management (support tickets, incident response)",
          "* Feedback collection and surveys",
          "* Meeting and event RSVPs",
          "* System notifications with actionable responses",
          "* Status updates with quick actions",
          "* Interactive reports",
          "",
          "## Best Practices",
          "",
          "* Register your originator ID before using in production",
          "* Keep cards focused on a single task or information set",
          "* Test cards across different Outlook clients (desktop, web, mobile)",
          "* Provide fallback text for non-supporting email clients",
          "",
          "## Resources",
          "",
          "* [Adaptive Cards Documentation](https://adaptivecards.io/)",
          "* [Outlook Actionable Messages Documentation](https://learn.microsoft.com/en-us/outlook/actionable-messages/)",
          "* [Adaptive Cards Designer](https://adaptivecards.io/designer/)",
          "* [Register Originator ID](https://aka.ms/publishactionableemails)",
          "* [ActionableMessages PowerShell Module - Building Interactive Emails Made Easy](https://mynster9361.github.io/posts/ActionableMessagesModule/)",
          "",
          "## Doing it withoout the module",
          "",
          "* [Adaptive Cards to Email through MS Graph (Actionable messages)](https://mynster9361.github.io/posts/ActionableMessages/)",
          "* [Adaptive Cards to Email through MS Graph (Actionable messages) Part 2](https://mynster9361.github.io/posts/ActionableMessagesPart2/)",
          "",
          "## Command Reference",
          ""
          )

          foreach ($command in ($commands | Sort-Object -Property Name)) {
              $content += "* [``$($command.Name)``](commands/$($command.Name)/)"
          }

          $mainIndexPath = "$targetDir/index.md"
          [System.IO.File]::WriteAllText($mainIndexPath, ($content -join "`n"))

      - name: Commit documentation to GitHub Pages repo
        run: |
          cd github-pages
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./_powershell_modules
          git commit -m "Update ActionableMessages module documentation" || echo "No changes to commit"
          git push