name: Build Module Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'Public/**'
      - 'docs/**'
      - '.github/workflows/github-pages.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ActionableMessages repository
        uses: actions/checkout@v3
        with:
          path: actionable-messages

      - name: Checkout GitHub Pages repository
        uses: actions/checkout@v3
        with:
          repository: Mynster9361/mynster9361.github.io
          token: ${{ secrets.GH_PAGES_TOKEN }}
          path: github-pages

      - name: Setup PowerShell
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PlatyPS -Force

      - name: Generate docs
        shell: pwsh
        run: |
          # Import module from ActionableMessages repo
          Import-Module ./actionable-messages/ActionableMessages.psd1 -Force

          # Create module collection directory in GitHub Pages repo
          $targetDir = "./github-pages/_powershell_modules/actionablemessages"
          New-Item -ItemType Directory -Path $targetDir -Force

          # Generate command docs
          $cmdDocsPath = "$targetDir/commands"
          New-Item -ItemType Directory -Path $cmdDocsPath -Force
          New-MarkdownHelp -Module ActionableMessages -OutputFolder $cmdDocsPath -Force

          # Add front matter to command pages
          $cmdFiles = Get-ChildItem -Path "$cmdDocsPath" -Filter "*.md"
          foreach($file in $cmdFiles) {
            $content = Get-Content -Path $file.FullName -Raw
            $cmdName = $file.BaseName

            # Use string concatenation instead of here-strings
            $frontMatter = "---`r`nlayout: page`r`ntitle: $cmdName`r`npermalink: /modules/actionablemessages/commands/$cmdName/`r`n---`r`n`r`n"
            $newContent = $frontMatter + $content
            Set-Content -Path $file.FullName -Value $newContent
          }

          # Create commands index page
          $commandsIndexPath = "$cmdDocsPath/index.md"
          $commandsIndexContent = "---`r`nlayout: page`r`ntitle: ActionableMessages Commands`r`npermalink: /modules/actionablemessages/commands/`r`n---`r`n`r`n"
          $commandsIndexContent += "# ActionableMessages Commands`r`n`r`n"
          $commandLinks = Get-Command -Module ActionableMessages | ForEach-Object {
            "- [``$($_.Name)``]($($_.Name)/)"
          } | Sort-Object
          $commandsIndexContent += [string]::Join("`r`n", $commandLinks)
          Set-Content -Path $commandsIndexPath -Value $commandsIndexContent

          # Create main index page with Jekyll front matter
          $mainIndexPath = "$targetDir/index.md"
          $mainIndexContent = "---`r`nlayout: page`r`ntitle: ActionableMessages PowerShell Module`r`npermalink: /modules/actionablemessages/`r`n---`r`n`r`n"
          $mainIndexContent += "# ActionableMessages PowerShell Module`r`n`r`n"
          $mainIndexContent += "A PowerShell module for creating Microsoft Actionable Messages.`r`n`r`n"
          $mainIndexContent += "## Installation`r`n`r`n"
          $mainIndexContent += "```powershell`r`nInstall-Module -Name ActionableMessages -Scope CurrentUser`r`n````r`n`r`n"
          $mainIndexContent += "## Quick Start`r`n`r`n"
          $mainIndexContent += "```powershell`r`n"
          $mainIndexContent += '$card = New-AMCard -ThemeColor "#0078D7"' + "`r`n"
          $mainIndexContent += '$Add-AMElement -InputObject $card -Element (New-AMTextBlock -Text "Hello, World!")' + "`r`n"
          $mainIndexContent += '$jsonCard = Export-AMCard -Card $card' + "`r`n"
          $mainIndexContent += "````r`n`r`n"
          $mainIndexContent += "## Command Reference`r`n`r`n"
          $cmdLinks = Get-Command -Module ActionableMessages | ForEach-Object {
            "- [``$($_.Name)``](commands/$($_.Name)/)"
          } | Sort-Object
          $mainIndexContent += [string]::Join("`r`n", $cmdLinks)
          Set-Content -Path $mainIndexPath -Value $mainIndexContent

      - name: Commit documentation to GitHub Pages repo
        run: |
          cd github-pages
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./_powershell_modules
          git commit -m "Update ActionableMessages module documentation" || echo "No changes to commit"
          git push