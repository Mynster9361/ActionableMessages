name: Pester Tests

on:
  pull_request:
    branches: [ main, master, development ]
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/pester-tests.yml'

jobs:
  test:
    name: Run Pester Tests
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup PowerShell Module Cache
        id: cache-psmodules
        uses: actions/cache@v3
        with:
          path: "~/.local/share/powershell/Modules"
          key: ${{ runner.os }}-psmodules-${{ hashFiles('**/requirements.psd1') }}
          restore-keys: |
            ${{ runner.os }}-psmodules-

      - name: Install PowerShell Modules
        if: steps.cache-psmodules.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -MinimumVersion 5.3.0 -Force -SkipPublisherCheck

      - name: Run Pester Tests
        id: pester
        shell: pwsh
        run: |
          $testResults = $null
          $testResultsFile = "$env:GITHUB_WORKSPACE/test-results.xml"
          $testResultsJson = "$env:GITHUB_WORKSPACE/test-results.json"

          try {
            # Explicitly import Pester
            Import-Module Pester -ErrorAction Stop
            $config = [PesterConfiguration]::Default
            $config.Run.Path = "$env:GITHUB_WORKSPACE/Tests"
            $config.TestResult.Enabled = $true
            $config.TestResult.OutputFormat = "NUnitXml"
            $config.TestResult.OutputPath = $testResultsFile
            $config.Output.Verbosity = "Detailed"

            $testResults = Invoke-Pester -Configuration $config

            # Create JSON for easier parsing in later steps
            $summary = @{
              TotalCount = $testResults.TotalCount
              PassedCount = $testResults.PassedCount
              FailedCount = $testResults.FailedCount
              SkippedCount = $testResults.SkippedCount
              NotRunCount = $testResults.NotRunCount
              Duration = $testResults.Duration.TotalSeconds
              FailedTests = @($testResults.Failed | ForEach-Object {
                @{
                  Name = $_.Name
                  Path = $_.Path
                  ErrorMessage = $_.ErrorRecord.Exception.Message
                }
              })
            }

            # Ensure directory exists before writing file
            Write-Host "Writing test results to: $testResultsJson"
            $summary | ConvertTo-Json -Depth 5 > $testResultsJson

            # Set output variables
            "passed_count=$($testResults.PassedCount)" >> $env:GITHUB_OUTPUT
            "failed_count=$($testResults.FailedCount)" >> $env:GITHUB_OUTPUT
            "skipped_count=$($testResults.SkippedCount)" >> $env:GITHUB_OUTPUT
            "total_count=$($testResults.TotalCount)" >> $env:GITHUB_OUTPUT

            if ($testResults.FailedCount -gt 0) {
              "result=failure" >> $env:GITHUB_OUTPUT
              exit 1
            } else {
              "result=success" >> $env:GITHUB_OUTPUT
            }
          }
          catch {
            Write-Error "Error running Pester tests: $_"
            "result=failure" >> $env:GITHUB_OUTPUT
            exit 1
          }

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ${{ github.workspace }}/test-results.xml
            ${{ github.workspace }}/test-results.json

            - name: Post Test Results Comment
            if: github.event_name == 'pull_request' && always()
            uses: actions/github-script@v6
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                const fs = require('fs');

                try {
                  // Log workspace path for debugging
                  console.log(`GitHub workspace path: ${process.env.GITHUB_WORKSPACE}`);
                  const resultPath = `${process.env.GITHUB_WORKSPACE}/test-results.json`;
                  console.log(`Looking for test results at: ${resultPath}`);

                  // Check if file exists
                  if (!fs.existsSync(resultPath)) {
                    console.log(`Test results file not found at ${resultPath}`);
                    const body = `## Pester Test Results ⚠️\n\nNo test results file was found. Tests may have failed to run properly.\n\n[View workflow run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;

                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.issue.number,
                      body
                    });
                    return;
                  }

                  // Read and parse test results
                  const testResults = JSON.parse(fs.readFileSync(resultPath, 'utf8'));
                  console.log('Test results loaded successfully');

                  const formatDuration = (seconds) => {
                    if (!seconds && seconds !== 0) return 'n/a';
                    const mins = Math.floor(seconds / 60);
                    const secs = Math.round(seconds % 60);
                    return `${mins}m ${secs}s`;
                  };

                  // Generate test result summary
                  let resultIcon = (testResults.FailedCount > 0) ? '❌' : '✅';
                  let resultColor = (testResults.FailedCount > 0) ? 'red' : 'green';

                  let body = `## Pester Test Results ${resultIcon}\n\n`;
                  body += `- **Total Tests:** ${testResults.TotalCount || 0}\n`;
                  body += `- **Passed:** ${testResults.PassedCount || 0} ✅\n`;
                  body += `- **Failed:** ${testResults.FailedCount || 0} ${(testResults.FailedCount > 0) ? '❌' : ''}\n`;
                  body += `- **Skipped:** ${testResults.SkippedCount || 0} ${(testResults.SkippedCount > 0) ? '⚠️' : ''}\n`;
                  body += `- **Not Run:** ${testResults.NotRunCount || 0}\n`;
                  body += `- **Duration:** ${formatDuration(testResults.Duration)}\n\n`;

                  // Add failed test details if any
                  if (testResults.FailedCount > 0 && Array.isArray(testResults.FailedTests)) {
                    body += `### Failed Tests\n\n`;
                    testResults.FailedTests.forEach(test => {
                      body += `<details>\n`;
                      body += `<summary><b>${test.Name || 'Unnamed test'}</b></summary>\n\n`;
                      body += `**Test:** ${test.Name || 'Unnamed test'}\n`;
                      body += `**Path:** ${test.Path || 'Path not available'}\n`;
                      body += `**Error:** ${test.ErrorMessage || 'No error message available'}\n`;
                      body += `</details>\n\n`;
                    });
                  }

                  body += `[View detailed test results](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;

                  // Find and update existing comment or create new one
                  const { data: comments } = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number
                  });

                  const existingComment = comments.find(comment =>
                    comment.user.login === 'github-actions[bot]' &&
                    comment.body.includes('## Pester Test Results')
                  );

                  if (existingComment) {
                    console.log(`Updating existing comment ID: ${existingComment.id}`);
                    await github.rest.issues.updateComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: existingComment.id,
                      body
                    });
                  } else {
                    console.log('Creating new comment');
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.issue.number,
                      body
                    });
                  }

                  console.log('Comment posted successfully');

                } catch (error) {
                  console.error('Error posting test results comment:');
                  console.error(error);

                  // Post error comment instead of failing
                  try {
                    const errorBody = `## Pester Test Results ⚠️\n\nThere was an error processing the test results:\n\`\`\`\n${error.message}\n\`\`\`\n\n[View workflow run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;

                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.issue.number,
                      body: errorBody
                    });
                  } catch (commentError) {
                    console.error('Failed to post error comment:', commentError);
                  }
                }

      - name: Check Test Results
        if: always()
        shell: pwsh
        run: |
          $result = "${{ steps.pester.outputs.result }}"
          if ($result -eq "failure") {
            throw "Tests failed"
          }