name: Release Management

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release:
        description: 'Create official release'
        required: true
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  update-draft:
    runs-on: ubuntu-latest
    steps:
      # Always run release-drafter to keep the draft updated
      - name: Update Draft Release
        id: release-drafter
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
          disable-releaser: false  # Create/update the draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: update-draft
    if: github.event_name == 'workflow_dispatch' && inputs.release == true
    runs-on: ubuntu-latest
    steps:
      # Run release-drafter to get the latest version number
      - name: Get Latest Version
        id: release-drafter
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
          disable-releaser: true  # Don't create the release here
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Checkout code to update module version and create assets
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update Module Version
        id: version
        shell: pwsh
        run: |
          $ManifestPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "ActionableMessages.psd1"
          $Manifest = Import-PowerShellDataFile $ManifestPath
          $CurrentVersion = [Version]$Manifest.ModuleVersion

          # Get the version from release-drafter
          $draftVersion = "${{ steps.release-drafter.outputs.resolved_version }}"
          if (-not [string]::IsNullOrEmpty($draftVersion)) {
            $NewVersion = $draftVersion.TrimStart('v')
          } else {
            # Fallback to patch bump
            $NewVersion = [Version]::new($CurrentVersion.Major, $CurrentVersion.Minor, $CurrentVersion.Build + 1)
          }

          Update-ModuleManifest -Path $ManifestPath -ModuleVersion $NewVersion
          echo "new_version=$NewVersion" >> $env:GITHUB_OUTPUT

      # Extract release notes from CHANGELOG.md
      - name: Extract Release Notes
        id: extract-release-notes
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.new_version }}"
          $changelogPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "CHANGELOG.md"

          if (Test-Path $changelogPath) {
            $changelogContent = Get-Content -Path $changelogPath -Raw

            # Find the section for the current version
            $versionHeader = "## [$version]"
            $nextVersionPattern = "## \["

            # Match the current version's section
            $match = [regex]::Match($changelogContent, "($versionHeader.*?)(?=$nextVersionPattern|\z)", [System.Text.RegularExpressions.RegexOptions]::Singleline)

            if ($match.Success) {
              $releaseNotes = $match.Groups[1].Value.Trim()
              # Escape newlines for GitHub Actions output
              $releaseNotes = $releaseNotes -replace "`n", "%0A"
              echo "release_notes<<EOF" >> $env:GITHUB_OUTPUT
              echo "$releaseNotes" >> $env:GITHUB_OUTPUT
              echo "EOF" >> $env:GITHUB_OUTPUT
              echo "Found release notes for version $version"
            } else {
              echo "No release notes found for version $version in CHANGELOG.md"
              # Fall back to release-drafter's generated notes
              $releaseNotes = "${{ steps.release-drafter.outputs.body }}" -replace "`n", "%0A"
              echo "release_notes<<EOF" >> $env:GITHUB_OUTPUT
              echo "$releaseNotes" >> $env:GITHUB_OUTPUT
              echo "EOF" >> $env:GITHUB_OUTPUT
            }
          } else {
            echo "CHANGELOG.md not found, using release-drafter's generated notes"
            $releaseNotes = "${{ steps.release-drafter.outputs.body }}" -replace "`n", "%0A"
            echo "release_notes<<EOF" >> $env:GITHUB_OUTPUT
            echo "$releaseNotes" >> $env:GITHUB_OUTPUT
            echo "EOF" >> $env:GITHUB_OUTPUT
          }

      # Create and package a .zip file for the release
      - name: Package Module
        shell: pwsh
        run: |
          $ModuleVersion = "${{ steps.version.outputs.new_version }}"
          $ZipFileName = "ActionableMessages-$ModuleVersion.zip"
          $ZipFilePath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath $ZipFileName

          # Create a temp directory
          $TempDir = Join-Path -Path ([System.IO.Path]::GetTempPath()) -ChildPath "ActionableMessages"
          New-Item -Path $TempDir -ItemType Directory -Force

          # Copy module files to temp directory
          Copy-Item -Path "$env:GITHUB_WORKSPACE/*" -Destination $TempDir -Recurse -Exclude @(".git", ".github")

          # Create zip file
          Compress-Archive -Path "$TempDir/*" -DestinationPath $ZipFilePath -Force

      # Commit the updated Module Version
      - name: Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ActionableMessages.psd1
          git commit -m "Bump version to v${{ steps.version.outputs.new_version }}" || echo "No changes to commit"
          git push

      # Create the final GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.version.outputs.new_version }}
          tag_name: v${{ steps.version.outputs.new_version }}
          body: ${{ steps.extract-release-notes.outputs.release_notes }}
          files: ActionableMessages-${{ steps.version.outputs.new_version }}.zip
          draft: false  # Create a published release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}