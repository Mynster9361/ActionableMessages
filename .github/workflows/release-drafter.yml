name: Draft Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  draft-release:
    name: Create Release Draft
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Module Info
        id: module_info
        shell: pwsh
        run: |
          $ManifestPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "ActionableMessages.psd1"
          $ModuleInfo = Import-PowerShellDataFile $ManifestPath
          $Version = $ModuleInfo.ModuleVersion
          echo "version=$Version" >> $env:GITHUB_OUTPUT

      - name: Install ChangelogManagement
        shell: pwsh
        run: |
          Install-Module -Name ChangelogManagement -Force -SkipPublisherCheck

      - name: Extract Changelog for Release
        id: changelog
        shell: pwsh
        run: |
          Import-Module ChangelogManagement

          $ChangelogPath = "CHANGELOG.md"
          $Version = "${{ steps.module_info.outputs.version }}"

          if (Test-Path $ChangelogPath) {
            # Read the changelog content
            $Content = Get-Content -Path $ChangelogPath -Raw

            # Look for the specific version section
            $VersionPattern = "## \[$Version\]"
            $NextVersionPattern = "## \["

            if ($Content -match $VersionPattern) {
              $StartIndex = $Content.IndexOf($VersionPattern)
              $StartIndex = $StartIndex + $VersionPattern.Length

              $EndIndex = $Content.IndexOf($NextVersionPattern, $StartIndex)
              if ($EndIndex -gt 0) {
                $ReleaseNotes = $Content.Substring($StartIndex, $EndIndex - $StartIndex).Trim()
              } else {
                # This is the last/only version in the changelog
                $ReleaseNotes = $Content.Substring($StartIndex).Trim()
              }

              # Also check if this needs to be released in the changelog
              # If it's still marked as [Unreleased], update it
              if ($Content -match "## \[Unreleased\]") {
                Write-Host "Releasing changelog for version $Version"
                Update-Changelog -Path $ChangelogPath -ReleaseVersion $Version

                # Commit the updated changelog
                git config --local user.email "action@github.com"
                git config --local user.name "GitHub Action"
                git add $ChangelogPath
                git commit -m "docs: release changelog for v$Version [skip ci]"
                git push
              }
            } else {
              # No specific version section found
              $ReleaseNotes = "Release version $Version"
              Write-Host "No specific section found for version $Version in changelog"
            }
          } else {
            # No changelog exists
            $ReleaseNotes = "Release version $Version"
            Write-Host "No changelog file found"
          }

          # Format for GitHub Actions output
          $ReleaseNotes = $ReleaseNotes -replace '%', '%25' -replace "`n", '%0A' -replace "`r", '%0D'
          echo "text<<EOF" >> $env:GITHUB_OUTPUT
          echo "$ReleaseNotes" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

          # Display what we're using
          Write-Host "Release notes extracted for version $Version"

      - name: Package Module
        shell: pwsh
        run: |
          # Create zip package of the module
          $ModuleVersion = "${{ steps.module_info.outputs.version }}"
          $ZipFileName = "ActionableMessages-$ModuleVersion.zip"
          $ZipFilePath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath $ZipFileName

          # Create a temp directory for the module files
          $TempDir = Join-Path -Path $env:TEMP -ChildPath "ActionableMessages"
          New-Item -Path $TempDir -ItemType Directory -Force

          # Copy module files to temp directory
          Copy-Item -Path "$env:GITHUB_WORKSPACE\*" -Destination $TempDir -Recurse -Exclude @(".git", ".github")

          # Create zip file
          Compress-Archive -Path "$TempDir\*" -DestinationPath $ZipFilePath -Force

      - name: Create Release Draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ActionableMessages v${{ steps.module_info.outputs.version }}
          body: ${{ steps.changelog.outputs.text }}
          draft: true
          prerelease: false

      - name: Upload Zip Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ActionableMessages-${{ steps.module_info.outputs.version }}.zip
          asset_name: ActionableMessages-${{ steps.module_info.outputs.version }}.zip
          asset_content_type: application/zip