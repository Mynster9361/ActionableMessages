name: Draft Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-release-draft:
    runs-on: ubuntu-latest
    steps:
      # First run release-drafter to get the version and draft release body
      - name: Draft Release
        id: release-drafter
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Checkout code to update module version and create assets
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update Module Version
        id: version
        shell: pwsh
        run: |
          $ManifestPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "ActionableMessages.psd1"
          $Manifest = Import-PowerShellDataFile $ManifestPath
          $CurrentVersion = [Version]$Manifest.ModuleVersion

          # Get the version from release-drafter
          $draftVersion = "${{ steps.release-drafter.outputs.resolved_version }}"
          if (-not [string]::IsNullOrEmpty($draftVersion)) {
            $NewVersion = $draftVersion.TrimStart('v')
          } else {
            # Fallback to patch bump
            $NewVersion = [Version]::new($CurrentVersion.Major, $CurrentVersion.Minor, $CurrentVersion.Build + 1)
          }

          Update-ModuleManifest -Path $ManifestPath -ModuleVersion $NewVersion
          echo "new_version=$NewVersion" >> $env:GITHUB_OUTPUT

      # Update CHANGELOG.md file with Keep a Changelog format
      - name: Update Changelog
        id: changelog
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.new_version }}"
          $releaseBody = @"
          ${{ steps.release-drafter.outputs.body }}
          "@

          $changelogPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "CHANGELOG.md"
          $today = Get-Date -Format "yyyy-MM-dd"

          # Create changelog header if it doesn't exist
          $header = @"
          # Changelog
          All notable changes to this project will be documented in this file.

          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          "@

          # Format the current release notes
          $releaseNotes = @"

          ## [$version] - $today

          $releaseBody
          "@

          # Replace any title line if present (usually comes from release-drafter template)
          $releaseNotes = $releaseNotes -replace "## Changes", ""

          if (Test-Path $changelogPath) {
            $existingContent = Get-Content -Path $changelogPath -Raw

            # Check if this version already exists in the changelog
            if ($existingContent -match "\#\# \[$version\]") {
              Write-Host "Version $version already exists in the changelog. Skipping addition."
              $newContent = $existingContent
            } else {
              # Check if the header already exists in the file
              if ($existingContent -match "The format is based on \[Keep a Changelog\]") {
                # Header exists, just add new release notes after the header
                $headerEndIndex = $existingContent.IndexOf("## [")
                if ($headerEndIndex -gt 0) {
                  $newContent = $existingContent.Substring(0, $headerEndIndex) + $releaseNotes + $existingContent.Substring($headerEndIndex)
                } else {
                  # No existing versions yet
                  $newContent = $existingContent + $releaseNotes
                }
              } else {
                # No proper header, add it along with the new release
                $newContent = $header + $releaseNotes + "`n`n" + $existingContent
              }
            }
          } else {
            # Create new file with header and release
            $newContent = $header + $releaseNotes
          }

          # Update version links at the bottom only if we made changes
          if (($existingContent -notmatch "\#\# \[$version\]") -or (-not (Test-Path $changelogPath))) {
            if ($newContent -notmatch '\[Unreleased\]:') {
              # Add version links if they don't exist
              $repoUrl = "https://github.com/${{ github.repository }}"
              $versionLinks = @"

          [Unreleased]: $repoUrl/compare/v$version...HEAD
          [$version]: $repoUrl/releases/tag/v$version
          "@
              $newContent += $versionLinks
            } else {
              # Update existing version links
              $currentUnreleasedLink = [regex]::Match($newContent, '\[Unreleased\]:(.*?)\n').Groups[1].Value.Trim()
              $previousVersionMatch = [regex]::Match($currentUnreleasedLink, 'compare/(v?.*?)\.\.\.HEAD')

              if ($previousVersionMatch.Success) {
                $previousVersion = $previousVersionMatch.Groups[1].Value

                # Don't update if the links already point to the current version
                if ($previousVersion -ne "v$version") {
                  # Replace Unreleased link
                  $newContent = $newContent -replace '\[Unreleased\]:(.*?)\n', "[Unreleased]: https://github.com/${{ github.repository }}/compare/v$version...HEAD`n"

                  # Add new version link if not already there
                  if ($newContent -notmatch "\[$version\]:") {
                    $versionLinkPattern = '\[Unreleased\]:(.*?)\n'
                    $versionLink = "[$version]: https://github.com/${{ github.repository }}/compare/$previousVersion...v$version`n"
                    $newContent = [regex]::Replace($newContent, $versionLinkPattern, "[Unreleased]: https://github.com/${{ github.repository }}/compare/v$version...HEAD`n$versionLink")
                  }
                }
              }
            }
          }

          Set-Content -Path $changelogPath -Value $newContent

          # Pass the release body to future steps
          $releaseBody = $releaseBody -replace "`n", "%0A"
          echo "release_body=$releaseBody" >> $env:GITHUB_OUTPUT

      # Create and package a .zip file for the release
      - name: Package Module
        shell: pwsh
        run: |
          $ModuleVersion = "${{ steps.version.outputs.new_version }}"
          $ZipFileName = "ActionableMessages-$ModuleVersion.zip"
          $ZipFilePath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath $ZipFileName

          # Create a temp directory
          $TempDir = Join-Path -Path ([System.IO.Path]::GetTempPath()) -ChildPath "ActionableMessages"
          New-Item -Path $TempDir -ItemType Directory -Force

          # Copy module files to temp directory
          Copy-Item -Path "$env:GITHUB_WORKSPACE/*" -Destination $TempDir -Recurse -Exclude @(".git", ".github")

          # Create zip file
          Compress-Archive -Path "$TempDir/*" -DestinationPath $ZipFilePath -Force

      # Commit the updated CHANGELOG.md and Module Version
      - name: Commit Changes
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md ActionableMessages.psd1
          git commit -m "Update CHANGELOG.md and bump version to v${{ steps.version.outputs.new_version }}" || echo "No changes to commit"
          git push

      # Use GitHub CLI to update the release with assets
      - name: Upload Release Assets
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the release ID from release-drafter output
          RELEASE_ID="${{ steps.release-drafter.outputs.id }}"

          # Upload the ZIP file
          gh release upload "v${{ steps.version.outputs.new_version }}" "ActionableMessages-${{ steps.version.outputs.new_version }}.zip" --clobber

          # Upload the CHANGELOG.md file
          gh release upload "v${{ steps.version.outputs.new_version }}" "CHANGELOG.md" --clobber