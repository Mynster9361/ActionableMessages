name: Release Management

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize, edited]
  workflow_dispatch:
    inputs:
      release:
        description: 'Create official release'
        required: true
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  update-draft:
    runs-on: ubuntu-latest
    steps:
      # Check out the code to access CHANGELOG.md
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Extract the last release date from CHANGELOG.md
      - name: Extract Last Release Date
        id: extract-date
        shell: pwsh
        run: |
          $changelogPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "CHANGELOG.md"
          if (Test-Path $changelogPath) {
            $content = Get-Content -Path $changelogPath -Raw
            $match = [regex]::Match($content, '## \[[0-9.]+\] - \[([0-9]{4}-[0-9]{2}-[0-9]{2})\]')
            if ($match.Success) {
              $lastReleaseDate = $match.Groups[1].Value
              echo "last_release_date=$lastReleaseDate" >> $env:GITHUB_OUTPUT
              echo "Found last release date: $lastReleaseDate"
            } else {
              echo "No release date found in CHANGELOG.md"
            }
          } else {
            echo "CHANGELOG.md not found"
          }

      # Run release-drafter with the date context
      - name: Update Draft Release
        id: release-drafter
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
          disable-releaser: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # We can't directly pass the date to release-drafter but
          # the date helps for informational purposes in logs
          LAST_RELEASE_DATE: ${{ steps.extract-date.outputs.last_release_date }}

  create-release:
    needs: update-draft
    if: github.event_name == 'workflow_dispatch' && inputs.release == true
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Extract the last release date from CHANGELOG.md
      - name: Extract Last Release Date
        id: extract-date
        shell: pwsh
        run: |
          $changelogPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "CHANGELOG.md"
          if (Test-Path $changelogPath) {
            $content = Get-Content -Path $changelogPath -Raw
            $match = [regex]::Match($content, '## \[[0-9.]+\] - \[([0-9]{4}-[0-9]{2}-[0-9]{2})\]')
            if ($match.Success) {
              $lastReleaseDate = $match.Groups[1].Value
              echo "last_release_date=$lastReleaseDate" >> $env:GITHUB_OUTPUT
              echo "Found last release date: $lastReleaseDate"
            } else {
              echo "No release date found in CHANGELOG.md"
            }
          } else {
            echo "CHANGELOG.md not found"
          }

      # Get latest version from release-drafter
      - name: Get Latest Version
        id: release-drafter
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
          disable-releaser: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Custom step to fetch commits since the last release date
      - name: Generate Commits Since Last Date
        id: custom-changes
        shell: pwsh
        run: |
          $lastReleaseDate = "${{ steps.extract-date.outputs.last_release_date }}"
          if (-not [string]::IsNullOrEmpty($lastReleaseDate)) {
            echo "Fetching commits since $lastReleaseDate"

            # Format for GitHub API query (needs ISO format with time)
            $dateIso = [DateTime]::Parse($lastReleaseDate).ToString("yyyy-MM-ddTHH:mm:ssZ")

            # Get commits since date
            $commits = gh api repos/${{ github.repository }}/commits --jq ".[] | {sha: .sha, message: .commit.message, date: .commit.author.date, author: .author.login}" --since "$dateIso"

            # Process and categorize commits
            $addedItems = @()
            $changedItems = @()
            $fixedItems = @()
            $otherItems = @()

            $commits | ConvertFrom-Json | ForEach-Object {
              $message = $_.message -split "`n" | Select-Object -First 1
              $item = "- $message"

              if ($message -match '^(feat|feature|add|added):') {
                $addedItems += $item
              } elseif ($message -match '^(change|changed|refactor):') {
                $changedItems += $item
              } elseif ($message -match '^(fix|fixed|bug):') {
                $fixedItems += $item
              } else {
                $otherItems += $item
              }
            }

            # Build the changes section
            $changes = ""

            if ($addedItems.Count -gt 0) {
              $changes += "`n### Added`n" + ($addedItems -join "`n")
            }

            if ($changedItems.Count -gt 0) {
              $changes += "`n### Changed`n" + ($changedItems -join "`n")
            }

            if ($fixedItems.Count -gt 0) {
              $changes += "`n### Fixed`n" + ($fixedItems -join "`n")
            }

            if ($otherItems.Count -gt 0) {
              $changes += "`n### Other`n" + ($otherItems -join "`n")
            }

            # If no categorized changes, use everything under "Other"
            if ($changes -eq "") {
              $allCommits = $commits | ConvertFrom-Json | ForEach-Object {
                $message = $_.message -split "`n" | Select-Object -First 1
                "- $message"
              }
              if ($allCommits.Count -gt 0) {
                $changes = "`n### Other`n" + ($allCommits -join "`n")
              }
            }

            # Escape for GitHub Actions output
            $changes = $changes -replace "`n", "%0A"
            echo "changes<<EOF" >> $env:GITHUB_OUTPUT
            echo "$changes" >> $env:GITHUB_OUTPUT
            echo "EOF" >> $env:GITHUB_OUTPUT
          } else {
            echo "No last release date found, using release-drafter's changes"
            echo "changes=${{ steps.release-drafter.outputs.body }}" >> $env:GITHUB_OUTPUT
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Update module version
      - name: Update Module Version
        id: version
        shell: pwsh
        run: |
          $ManifestPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "ActionableMessages.psd1"
          $Manifest = Import-PowerShellDataFile $ManifestPath
          $CurrentVersion = [Version]$Manifest.ModuleVersion

          # Get the version from release-drafter
          $draftVersion = "${{ steps.release-drafter.outputs.resolved_version }}"
          if (-not [string]::IsNullOrEmpty($draftVersion)) {
            $NewVersion = $draftVersion.TrimStart('v')
          } else {
            # Fallback to patch bump
            $NewVersion = [Version]::new($CurrentVersion.Major, $CurrentVersion.Minor, $CurrentVersion.Build + 1)
          }

          Update-ModuleManifest -Path $ManifestPath -ModuleVersion $NewVersion
          echo "new_version=$NewVersion" >> $env:GITHUB_OUTPUT

      # Package module
      - name: Package Module
        shell: pwsh
        run: |
          $ModuleVersion = "${{ steps.version.outputs.new_version }}"
          $ZipFileName = "ActionableMessages-$ModuleVersion.zip"
          $ZipFilePath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath $ZipFileName

          # Create a temp directory
          $TempDir = Join-Path -Path ([System.IO.Path]::GetTempPath()) -ChildPath "ActionableMessages"
          New-Item -Path $TempDir -ItemType Directory -Force

          # Copy module files to temp directory
          Copy-Item -Path "$env:GITHUB_WORKSPACE/*" -Destination $TempDir -Recurse -Exclude @(".git", ".github")

          # Create zip file
          Compress-Archive -Path "$TempDir/*" -DestinationPath $ZipFilePath -Force

      # Commit the updated Module Version
      - name: Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ActionableMessages.psd1
          git commit -m "Bump version to v${{ steps.version.outputs.new_version }}" || echo "No changes to commit"
          git push

      # Create the final GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.version.outputs.new_version }}
          tag_name: v${{ steps.version.outputs.new_version }}
          body: |
            ## [v${{ steps.version.outputs.new_version }}] - [${{ steps.extract-date.outputs.last_release_date }}]
            ${{ steps.custom-changes.outputs.changes }}

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.release-drafter.outputs.previous_tag }}...v${{ steps.version.outputs.new_version }}
          files: ActionableMessages-${{ steps.version.outputs.new_version }}.zip
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}